[
    
    
    
        
            {
                "id": 0,
                "href": "https://satouyuuki.github.io/post/readable-code-testing-and-readability/",
                "title": "気合いで読むthe art of readable code part2",
                "section": "post",
                "date" : "2022.05.19",
                "body": "本を読む目的 テストコードを書こうと思ったので読んだ\n本のタイトル readable code PDFリンク\nメモ  テストコードはreadableに書く。他の人が快適に変更を加えられるように。 テストコードの処理を見やすくするようにhelper functionを追加する  bad: vector\u0026lt;ScoredDocument\u0026gt; docs; docs.resize(5); docs[0].url = \u0026#34;http://example.com\u0026#34;; docs[0].score = 3; ... good: void MakeScoredDoc(ScoredDocument* sd, double score, string url) { sd-\u0026gt;score = score; sd-\u0026gt;url = url; } voctor\u0026lt;ScoredDocument\u0026gt; docs; docs.resize(5); MakeScoredDoc(\u0026amp;docs[0], 3, \u0026#34;http://example.com\u0026#34;);  helper functionの機能を使いやすくする  まあまあ: void MakeScoredDoc(ScoredDocument* sd, double score, string url) { sd-\u0026gt;score = score; sd-\u0026gt;url = url; } good: void AddScoredDoc(vector\u0026lt;ScoredDocument\u0026gt;\u0026amp; docs, double score) { ScoredDocument sd; sd.score = score; sd.url = \u0026#34;http://example.com\u0026#34;; docs.push_back(sd); } vector\u0026lt;ScoredDocument\u0026gt; docs; AddScoredDoc(docs, 3);  命名をわかりやすくする  good: void CheckScoresBeforeAfter(string input, string expected_output) { vector\u0026lt;ScoredDocument\u0026gt; docs = ScoredDocsFromString(input); SortAndFilterDocs(\u0026amp;docs); string output = ScoredDocsToString(docs); assert(output == expected_output); }  assertionエラー文言もわかりやすくする  まあまあ: assert(output == expected_output); good:(ex: Boost c++ library) BOOST_REQUEST_EQUAL(output, expected_output);  ネーミングに規則を持たせる  bad: Test1() {...} good: Test__\u0026lt;FunctionName\u0026gt;_\u0026lt;Situation\u0026gt;() {...} "
            }
    
        ,
            {
                "id": 1,
                "href": "https://satouyuuki.github.io/post/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/",
                "title": "どうしたらスプリントは計画通りに進のか",
                "section": "post",
                "date" : "2022.05.18",
                "body": "本を読む目的 スプリントの計画と実績がずれる。全然想定通りに終わらない。 計画通りにスプリントを回すには通したら良いのか\n答え スプリントが決まった後に「なるはやタスク」と「見えないタスク」が発生したらスプリントの更新方法を見直す。基本的にはスプリント最後のPBIと優先度を比較する。「なるはやタスク」は緊急度が高く、重要度が低いものに気をつける。\nスプリント作成時(プランニング時)はプランニングポーカーを実施し、タスクに対する認識のズレを洗い出す。\nそして日常的にタスクボードやデイリースクラムでタスクの見える化を行う。不具合や新機能実装時にテストコードが導入できないかは検討する。\nメモ  5/18 一番優しいアジャイル開発の教本 高速に作り、試すサイクルが回ることで質が安定する 安心してリリースできる環境を整え、変化に強い設計を実現することでスピードが生まれる 最初の一歩としては「見える化」と「一緒に取り組む」 タスクと状況の見える化、日常の見える化 割り込みタスクとスプリントバックログのタスクで優先度を比較しながらタスクを管理する。緊急度は高いが重要度は低いタスクに注意する。 タスクは作業を表すものなので動詞になる。対象と作業と完了条件は明確に決める タスクのサイズは多くても一日にする タスクのサイズはすでに規模かんが把握されてるタスクと比較して相対的に決める。ポイントの数値はフィボナッチを採用(大きいタスクほど誤差が含まれるということが表現されている) ベロシティーとポイントからチームがどれだけタスクをこなせるかの予測を立てる 最低でもプランニング２部のタスク出しよりも前にプランニングポーカーを行う。なぜなら各々の経験値に基づくタスク見積もり時間の差異が大事だから。その差異はメンバーの認識のズレである可能性がある。カードを一斉に出す前に質問タイムを設ける 朝会は「昨日やったこと、今日やること、困ってること」の3点だけを話す。詳細な話は関係者だけ集め別で開く。 朝会はチームのもやもやや違和感を取り除く会でもある。解消法としてファイブフィンガー法がある。自分の作業タスクの進捗具合を1~5で伝える 仮説検証がアジャイル開発の強み。仮説を検証する最小単位はMVP(minimum value product)フルセットで確認依頼を出すのではなく、UIは後回しにしてもapiができれば先に確認してもらうのも一つの手段 テストコードは先行投資。追加するタイミングは新機能の追加の際か不具合が発生した箇所から追加していく。テストが書きにくかったらプロダクトコードのメソッドを意味のある単位まで分割すること。  "
            }
    
        ,
            {
                "id": 2,
                "href": "https://satouyuuki.github.io/post/readable-code-thoughts/",
                "title": "気合いで読むthe art of readable code",
                "section": "post",
                "date" : "2022.05.17",
                "body": "なぜ本を読むのか プログラミングの命名について指摘されることが増えた。英語のリーディングの練習\n本のタイトル readable code PDFリンク\n 広い意味の動詞をなるべく使わない  bad: GetPage() // どこから取得するのかわからない good: FetchPage(), DownloadPage() // インターネットから取ってくる  意味のない変数名を避けて意味のある変数名にしよう  bad: retval(意味: return value) good: sum_square(意味: 平方根の合計)  ループで使う変数もわかりやすく命名しよう  bad: i, j, k good: clubs-\u0026gt; ci, members-\u0026gt; mi, users-\u0026gt;ui  変数名はdirect, explicitな意味を使う  bad: --run_locally good: --extra_logging 格言: 変数名は小さなコメントのようなものだ  変数に含められる情報ならコメントではなく変数名に含める  bad: string id; // Example: \u0026#34;af84ef845cd8\u0026#34; good: hex_id  変数名に情報を含めるとバグを見つけやすい  bad: var start = (new Date()).getTime(); good: var start_ms = (new Date()).getTime(); //返り値がmillisecondsだということが明らかになる   Q. 変数の長さは結局どのぐらいの長さにすればいいのか\n  A. 変数のスコープが狭ければ短い名前でも良い。グローバルで使われる変数ほど詳細度をあげる。 ※長いと打ち込むのが疲れるからは長い変数名を避ける理由にならない(エディターが候補を出してくれるから)\n  新しいチームメイトがすぐ理解できないような命名なら使わない\n  bad: BEManagement good: BackEndManagement "
            }
    
        ,
            {
                "id": 3,
                "href": "https://satouyuuki.github.io/post/hoge/",
                "title": "title",
                "section": "post",
                "date" : "2019.03.05",
                "body": "hoge hoge\n"
            }
    
]
